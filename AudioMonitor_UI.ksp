
import "AudioMonitor_Shared.ksp"


on init 
	message(" ")
	AUDIOMONITOR.init

	declare const UI_HEIGHT  := 300
	declare const UI_WIDTH := 633
	declare const UI_OFFSET_X := 80
	set_ui_height_px(UI_HEIGHT)
	set_ui_width_px(UI_WIDTH)
	
	declare AUDIOMONITOR.UI.AudioRouting.width := 100 
	declare AUDIOMONITOR.UI.AudioRouting.hspacing := 20
	declare AUDIOMONITOR.UI.AudioRouting.vspacing := 25
	declare AUDIOMONITOR.UI.AudioRouting.Menu.height := 20

	declare AUDIOMONITOR.a  
	declare AUDIOMONITOR.b
	declare AUDIOMONITOR.c 
	declare AUDIOMONITOR.d
	declare AUDIOMONITOR.idxMin
	declare AUDIOMONITOR.idxMax

	declare pers ui_menu AUDIOMONITOR.UI.MENU.Events[AUDIOMONITOR.CONFIG.maxITEMS] 
	iterate_macro(AUDIOMONITOR.UI.MENU.Events_CONFIGURE) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1

	declare pers ui_menu AUDIOMONITOR.UI.MENU.GroupsEvent[AUDIOMONITOR.CONFIG.maxITEMS]
	declare pers ui_menu AUDIOMONITOR.UI.MENU.GroupsNoEvent[AUDIOMONITOR.CONFIG.maxITEMS]
	iterate_macro(AUDIOMONITOR.UI.MENU.Groups_CONFIGURE) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1

	declare pers ui_menu AUDIOMONITOR.UI.MENU.Variables[AUDIOMONITOR.CONFIG.maxITEMS] 
	iterate_macro(AUDIOMONITOR.UI.MENU.Variables_CONFIGURE) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1

	declare pers ui_menu AUDIOMONITOR.UI.MENU.Outputs[AUDIOMONITOR.CONFIG.maxITEMS] 
	iterate_macro(AUDIOMONITOR.UI.MENU.Outputs_CONFIGURE) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1

	pgs_create_key(PGS_AUDIOMONITOR_ROUTING, AUDIOMONITOR_PGS_ARRSIZE) 

end on

on persistence_changed 
	iterate_macro(AUDIOMONITOR.PostInitPGS) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1
end on

macro AUDIOMONITOR.UI.MENU.Events_CONFIGURE(#n#)
	for AUDIOMONITOR.i:= 0 to num_elements(AUDIOMONITOR.CONFIG.Events) - 1
		add_menu_item(AUDIOMONITOR.UI.MENU.Events#n#, AUDIOMONITOR.CONFIG.Events[AUDIOMONITOR.i], AUDIOMONITOR.i)
	end for
	AUDIOMONITOR.a := (UI_WIDTH - UI_OFFSET_X - 5) / (AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing) 
	AUDIOMONITOR.b := ((UI_WIDTH - UI_OFFSET_X - 5) - AUDIOMONITOR.a*(AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing)) / AUDIOMONITOR.a 
    AUDIOMONITOR.c := #n# mod AUDIOMONITOR.a 
    AUDIOMONITOR.d := #n# / AUDIOMONITOR.a 
    set_bounds(AUDIOMONITOR.UI.MENU.Events[#n#], UI_OFFSET_X + AUDIOMONITOR.c*(AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing+AUDIOMONITOR.b), 5 + AUDIOMONITOR.d*((15+AUDIOMONITOR.UI.AudioRouting.Menu.height)*AUDIOMONITOR_ELEMENTSperITEM), AUDIOMONITOR.UI.AudioRouting.width, AUDIOMONITOR.UI.AudioRouting.Menu.height)
	set_control_par(AUDIOMONITOR.UI.MENU.Events[#n#],$CONTROL_PAR_TEXT_ALIGNMENT,1)
end macro
	
macro AUDIOMONITOR.UI.MENU.Groups_CONFIGURE(#n#) 
	if AUDIOMONITOR.Marker_cnt > 0
		for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Marker_cnt - 1
			add_menu_item(AUDIOMONITOR.UI.MENU.GroupsEvent#n#, !AUDIOMONITOR.Group.Markers[AUDIOMONITOR.i+1], AUDIOMONITOR.i)
		end for
	end if
	if AUDIOMONITOR.Line_cnt > 0
		for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Line_cnt - 1
			add_menu_item(AUDIOMONITOR.UI.MENU.GroupsEvent#n#, !AUDIOMONITOR.Group.Lines[AUDIOMONITOR.i+1], AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.i)
			add_menu_item(AUDIOMONITOR.UI.MENU.GroupsNoEvent#n#, !AUDIOMONITOR.Group.Lines[AUDIOMONITOR.i+1], AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.i)
		end for
	end if 
	if AUDIOMONITOR.External_cnt > 0
		for AUDIOMONITOR.i := 0 to AUDIOMONITOR.External_cnt - 1
			add_menu_item(AUDIOMONITOR.UI.MENU.GroupsNoEvent#n#, !AUDIOMONITOR.Group.Externals[AUDIOMONITOR.i+1], AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.Line_cnt + AUDIOMONITOR.i)
		end for
	end if
    AUDIOMONITOR.a := (UI_WIDTH - UI_OFFSET_X - 5) / (AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing) 
    AUDIOMONITOR.b := ((UI_WIDTH - UI_OFFSET_X - 5) - AUDIOMONITOR.a*(AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing)) / AUDIOMONITOR.a 
    AUDIOMONITOR.c := #n# mod AUDIOMONITOR.a 
    AUDIOMONITOR.d := #n# / AUDIOMONITOR.a 
    set_bounds(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#], UI_OFFSET_X + AUDIOMONITOR.c*(AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing+AUDIOMONITOR.b), 5 + AUDIOMONITOR.d*((15+AUDIOMONITOR.UI.AudioRouting.Menu.height)*AUDIOMONITOR_ELEMENTSperITEM) + AUDIOMONITOR.UI.AudioRouting.vspacing, AUDIOMONITOR.UI.AudioRouting.width, AUDIOMONITOR.UI.AudioRouting.Menu.height)
	set_control_par(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#],$CONTROL_PAR_TEXT_ALIGNMENT,1)
	set_bounds(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#], UI_OFFSET_X + AUDIOMONITOR.c*(AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing+AUDIOMONITOR.b), 5 + AUDIOMONITOR.d*((15+AUDIOMONITOR.UI.AudioRouting.Menu.height)*AUDIOMONITOR_ELEMENTSperITEM) + AUDIOMONITOR.UI.AudioRouting.vspacing, AUDIOMONITOR.UI.AudioRouting.width, AUDIOMONITOR.UI.AudioRouting.Menu.height)
	set_control_par(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#],$CONTROL_PAR_TEXT_ALIGNMENT,1)
end macro

macro AUDIOMONITOR.UI.MENU.Variables_CONFIGURE(#n#)
	if AUDIOMONITOR.Variable_cnt > 0 
		for AUDIOMONITOR.i:= 0 to AUDIOMONITOR.Variable_cnt - 1
	    	add_menu_item(AUDIOMONITOR.UI.MENU.Variables#n#, AUDIOMONITOR.CONFIG.Variables[AUDIOMONITOR.i+1], AUDIOMONITOR.i)
	    end for
	end if 
    AUDIOMONITOR.a := (UI_WIDTH - UI_OFFSET_X - 5) / (AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing)
    AUDIOMONITOR.b := ((UI_WIDTH - UI_OFFSET_X - 5) - AUDIOMONITOR.a*(AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing)) / AUDIOMONITOR.a
    AUDIOMONITOR.c := #n# mod AUDIOMONITOR.a 
    AUDIOMONITOR.d := #n# / AUDIOMONITOR.a 
    set_bounds(AUDIOMONITOR.UI.MENU.Variables[#n#], UI_OFFSET_X + AUDIOMONITOR.c*(AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing+AUDIOMONITOR.b), 5 + AUDIOMONITOR.d*((15+AUDIOMONITOR.UI.AudioRouting.Menu.height)*AUDIOMONITOR_ELEMENTSperITEM) + AUDIOMONITOR.UI.AudioRouting.vspacing*2, AUDIOMONITOR.UI.AudioRouting.width, AUDIOMONITOR.UI.AudioRouting.Menu.height)
	set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#],$CONTROL_PAR_TEXT_ALIGNMENT,1)
end macro

macro AUDIOMONITOR.UI.MENU.Outputs_CONFIGURE(#n#)
	for AUDIOMONITOR.i:= 0 to 7
    	add_menu_item(AUDIOMONITOR.UI.MENU.Outputs#n#, AUDIOMONITOR.CONFIG.Outputs[AUDIOMONITOR.i], AUDIOMONITOR.i)
    end for
    AUDIOMONITOR.a := (UI_WIDTH - UI_OFFSET_X - 5) / (AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing)
    AUDIOMONITOR.b := ((UI_WIDTH - UI_OFFSET_X - 5) - AUDIOMONITOR.a*(AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing)) / AUDIOMONITOR.a
    AUDIOMONITOR.c := #n# mod AUDIOMONITOR.a
    AUDIOMONITOR.d := #n# / AUDIOMONITOR.a
    set_bounds(AUDIOMONITOR.UI.MENU.Outputs[#n#], UI_OFFSET_X + AUDIOMONITOR.c*(AUDIOMONITOR.UI.AudioRouting.width+AUDIOMONITOR.UI.AudioRouting.hspacing+AUDIOMONITOR.b), 5 + AUDIOMONITOR.d*((15+AUDIOMONITOR.UI.AudioRouting.Menu.height)*AUDIOMONITOR_ELEMENTSperITEM) + AUDIOMONITOR.UI.AudioRouting.vspacing*3, AUDIOMONITOR.UI.AudioRouting.width, AUDIOMONITOR.UI.AudioRouting.Menu.height)
	set_control_par(AUDIOMONITOR.UI.MENU.Outputs[#n#],$CONTROL_PAR_TEXT_ALIGNMENT,1)
end macro

macro AUDIOMONITOR.PostInitPGS(#n#)	
	message(" =============AUDIOMONITOR.PostInitPGS================= ")
	message("event: " & AUDIOMONITOR.UI.MENU.Events#n#)
	pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM, AUDIOMONITOR.UI.MENU.Events#n#) 
	//pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 1, AUDIOMONITOR.UI.MENU.GroupsEvent#n#) 
	//pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, AUDIOMONITOR.UI.MENU.Variables#n#)
	//pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 3, AUDIOMONITOR.UI.MENU.Outputs#n#) 

	for AUDIOMONITOR.i := 0 to num_elements(AUDIOMONITOR.UI.MENU.GroupsEvent) - 1
		set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#],AUDIOMONITOR.i,0) // reset
	end for
	set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)

	if AUDIOMONITOR.UI.MENU.Events#n# = 0 
		pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, -1) // no variable
		set_control_par(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)
		set_control_par(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)		
		set_control_par(AUDIOMONITOR.UI.MENU.Outputs[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)
	else 
		set_control_par(AUDIOMONITOR.UI.MENU.Outputs[#n#], CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
		if AUDIOMONITOR.UI.MENU.Events#n# # AUDIOMONITOR.ENUM.ALWAYS_ // activate GroupsEvent
			pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 1, AUDIOMONITOR.UI.MENU.GroupsEvent#n#)
			set_control_par(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#], CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
			for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Group_cnt - 1 //num_elements(AUDIOMONITOR.CONFIG.Groups) - 1
				set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#],AUDIOMONITOR.i,0) // reset
			end for
			if AUDIOMONITOR.Marker_cnt > 0
				if AUDIOMONITOR.UI.MENU.Events#n# # AUDIOMONITOR.ENUM.ALWAYS_ 
					for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Marker_cnt - 1
						set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#],AUDIOMONITOR.i,1)
						message("___ adding marker at idx " & AUDIOMONITOR.i)
					end for 
				end if
			end if 
			if AUDIOMONITOR.Line_cnt > 0
				for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Line_cnt - 1
					set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#],AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.i,1) 
					message("___ adding line at idx " & AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.i)
				end for
			end if
		else // activate GrousNoEvent
			pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 1, AUDIOMONITOR.UI.MENU.GroupsNoEvent#n#)
			for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Group_cnt - 1 //num_elements(AUDIOMONITOR.CONFIG.Groups) - 1
				set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#],AUDIOMONITOR.i,0) // reset
			end for
			 if AUDIOMONITOR.Line_cnt > 0
				for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Line_cnt - 1
					set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#], AUDIOMONITOR.i,1) 
					message("___ adding line at idx " & AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.i)
				end for
			end if
			if AUDIOMONITOR.External_cnt > 0
				for AUDIOMONITOR.i := 0 to AUDIOMONITOR.External_cnt - 1
					set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#], AUDIOMONITOR.Line_cnt + AUDIOMONITOR.i,1)
					message("___ adding external at idx " & AUDIOMONITOR.Line_cnt + AUDIOMONITOR.i)
				end for 
			end if
			if AUDIOMONITOR.UI.MENU.GroupsEvent#n# < AUDIOMONITOR.Line_cnt
				set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_PART_NOTHING) // show variables menu 
				pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, AUDIOMONITOR.UI.MENU.Variables#n#)
				for AUDIOMONITOR.i := 0 to AUDIOMONITOR_ELEMENTSperITEM - 1		
					set_menu_item_visibility(AUDIOMONITOR.UI.MENU.Variables[#n#],AUDIOMONITOR.i,1)
				end for
			else 
				pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, -1)
				set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL) // hide variables menu
			end if
		end if	
	end if
end macro 
//iterate_macro(AUDIOMONITOR.PostInitPGS) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1 

macro AUDIOMONITOR.SetEvents(#n#)
	on ui_control(AUDIOMONITOR.UI.MENU.Events#n#)

		if AUDIOMONITOR.CONFIG.PRINT = 1 
			message("Item n. " & #n# & " , event: " & !AUDIOMONITOR.CONFIG.Events[AUDIOMONITOR.UI.MENU.Events#n#])
		end if
		pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM, AUDIOMONITOR.UI.MENU.Events#n#) 
		//pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 1, AUDIOMONITOR.UI.MENU.GroupsEvent#n#) 
		//pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, AUDIOMONITOR.UI.MENU.Variables#n#)
		//pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 3, AUDIOMONITOR.UI.MENU.Outputs#n#) 

		for AUDIOMONITOR.i := 0 to num_elements(AUDIOMONITOR.UI.MENU.GroupsEvent) - 1
			set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#],AUDIOMONITOR.i,0) // reset
		end for
		set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)

		if AUDIOMONITOR.UI.MENU.Events#n# = 0 
			pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, -1) // no variable
			set_control_par(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)
			set_control_par(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)		
			set_control_par(AUDIOMONITOR.UI.MENU.Outputs[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)
		else 
			set_control_par(AUDIOMONITOR.UI.MENU.Outputs[#n#], CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
			if AUDIOMONITOR.UI.MENU.Events#n# # AUDIOMONITOR.ENUM.ALWAYS_ // activate GroupsEvent
				message("activate GroupsEvent")
				pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 1, AUDIOMONITOR.UI.MENU.GroupsEvent#n#)
				set_control_par(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)
				set_control_par(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#], CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
				for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Group_cnt - 1 //num_elements(AUDIOMONITOR.CONFIG.Groups) - 1
					set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#],AUDIOMONITOR.i,0) // reset
				end for
				if AUDIOMONITOR.Marker_cnt > 0
					for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Marker_cnt - 1
						set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#],AUDIOMONITOR.i,1)
						message("___ adding marker at idx " & AUDIOMONITOR.i)
					end for 
				end if 
				if AUDIOMONITOR.Line_cnt > 0
					for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Line_cnt - 1
						set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#],AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.i,1) 
						message("___ adding line at idx " & AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.i)
					end for
				end if
			else // activate GrouspNoEvent
				message("activate GroupsNoEvent")
				pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 1, AUDIOMONITOR.UI.MENU.GroupsNoEvent#n# + AUDIOMONITOR.Marker_cnt) 
				set_control_par(AUDIOMONITOR.UI.MENU.GroupsEvent[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL)
				set_control_par(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#], CONTROL_PAR_HIDE, HIDE_PART_NOTHING)
				for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Group_cnt - 1 //num_elements(AUDIOMONITOR.CONFIG.Groups) - 1
					set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#],AUDIOMONITOR.i,0) // reset
				end for
				 if AUDIOMONITOR.Line_cnt > 0
					for AUDIOMONITOR.i := 0 to AUDIOMONITOR.Line_cnt - 1
						set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#],AUDIOMONITOR.i,1) 
						message("___ adding line at idx " & AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.i)
					end for
				end if
				if AUDIOMONITOR.External_cnt > 0
					for AUDIOMONITOR.i := 0 to AUDIOMONITOR.External_cnt - 1
						set_menu_item_visibility(AUDIOMONITOR.UI.MENU.GroupsNoEvent[#n#], AUDIOMONITOR.Line_cnt + AUDIOMONITOR.i,1)
						message("___ adding external at idx " & AUDIOMONITOR.Line_cnt + AUDIOMONITOR.i)
					end for 
				end if
				if AUDIOMONITOR.UI.MENU.GroupsEvent#n# < AUDIOMONITOR.Line_cnt
					set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_PART_NOTHING) // show variables menu 
					pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, AUDIOMONITOR.UI.MENU.Variables#n#)
					for AUDIOMONITOR.i := 0 to AUDIOMONITOR_ELEMENTSperITEM - 1		
						set_menu_item_visibility(AUDIOMONITOR.UI.MENU.Variables[#n#],AUDIOMONITOR.i,1)
					end for
				else 
					pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, -1)
					set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL) // hide variables menu
				end if
			end if	
		end if
	end on 
end macro 
iterate_macro(AUDIOMONITOR.SetEvents) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1 

macro AUDIOMONITOR.SetGroups(#n#)
    on ui_control(AUDIOMONITOR.UI.MENU.GroupsEvent#n#)
     	pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 1, AUDIOMONITOR.UI.MENU.GroupsEvent#n#) 
     	if AUDIOMONITOR.Variable_cnt > 0 

			if AUDIOMONITOR.UI.MENU.GroupsEvent#n# >= AUDIOMONITOR.Marker_cnt 
				message("triggered")
				set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_PART_NOTHING) // show variables menu 
				for AUDIOMONITOR.i := 0 to AUDIOMONITOR_ELEMENTSperITEM - 1		
					set_menu_item_visibility(AUDIOMONITOR.UI.MENU.Variables[#n#],AUDIOMONITOR.i,1)
				end for
				pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, AUDIOMONITOR.UI.MENU.Variables#n#)
			else 
				message("not triggered")
				set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL) // hide variables menu
				pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, -1)
			end if
		end if
    end on
    on ui_control(AUDIOMONITOR.UI.MENU.GroupsNoEvent#n#)
     	pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 1, AUDIOMONITOR.UI.MENU.GroupsNoEvent#n# + AUDIOMONITOR.Marker_cnt) 
     	if AUDIOMONITOR.Variable_cnt > 0 

			if AUDIOMONITOR.UI.MENU.GroupsNoEvent#n# < AUDIOMONITOR.Marker_cnt + AUDIOMONITOR.Line_cnt
				message("triggered")
				set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_PART_NOTHING) // show variables menu 
				for AUDIOMONITOR.i := 0 to AUDIOMONITOR_ELEMENTSperITEM - 1		
					set_menu_item_visibility(AUDIOMONITOR.UI.MENU.Variables[#n#],AUDIOMONITOR.i,1)
				end for
				pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, AUDIOMONITOR.UI.MENU.Variables#n#)
			else 
				message("not triggered")
				set_control_par(AUDIOMONITOR.UI.MENU.Variables[#n#], CONTROL_PAR_HIDE, HIDE_WHOLE_CONTROL) // hide variables menu
				pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, -1)
			end if
		end if
    end on
end macro
iterate_macro(AUDIOMONITOR.SetGroups) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1

macro AUDIOMONITOR.SetVariables(#n#) 
    on ui_control(AUDIOMONITOR.UI.MENU.Variables#n#)
     	pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 2, AUDIOMONITOR.UI.MENU.Variables#n#)       
    end on
end macro
iterate_macro(AUDIOMONITOR.SetVariables) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1

macro AUDIOMONITOR.SetBuses(#n#) 
    on ui_control(AUDIOMONITOR.UI.MENU.Outputs#n#)
     	pgs_set_key_val(PGS_AUDIOMONITOR_ROUTING, #n# * AUDIOMONITOR_ELEMENTSperITEM + 3, AUDIOMONITOR.UI.MENU.Outputs#n#)       
    end on
end macro
iterate_macro(AUDIOMONITOR.SetBuses) := 0 to AUDIOMONITOR.CONFIG.maxITEMS - 1
